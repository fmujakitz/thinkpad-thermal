export const ANIMATION_TIME: 250;
export class Overview extends Signals.EventEmitter {
    _initCalled: boolean;
    _visible: boolean;
    get dash(): any;
    get dashIconSize(): any;
    get animationInProgress(): boolean;
    get visible(): boolean;
    get visibleTarget(): boolean;
    get closing(): boolean;
    _createOverview(): void;
    _activationTime: number;
    _shown: boolean;
    _modal: boolean;
    _animationInProgress: boolean;
    _visibleTarget: boolean;
    _shownState: any;
    _coverPane: any;
    _dragMonitor: {
        dragMotion: any;
    };
    _windowSwitchTimeoutId: any;
    _windowSwitchTimestamp: any;
    _lastActiveWorkspaceIndex: any;
    _lastHoveredWindow: any;
    _sessionUpdated(): void;
    isDummy: boolean;
    init(): void;
    _overview: any;
    _shellInfo: ShellInfo;
    _swipeTracker: any;
    setMessage(text: any, options: any): void;
    _changeShownState(state: any): void;
    _onDragBegin(): void;
    _inXdndDrag: boolean;
    _onDragEnd(): void;
    _resetWindowSwitchTimeout(): void;
    _onDragMotion(dragEvent: any): number;
    _onScrollEvent(actor: any, event: any): any;
    _relayout(): void;
    _onRestacked(): void;
    _gestureBegin(tracker: any): void;
    _gestureUpdate(tracker: any, progress: any): void;
    _gestureEnd(tracker: any, duration: any, endProgress: any): void;
    beginItemDrag(source: any): void;
    _inItemDrag: boolean;
    cancelledItemDrag(source: any): void;
    endItemDrag(source: any): void;
    beginWindowDrag(window: any): void;
    _inWindowDrag: boolean;
    cancelledWindowDrag(window: any): void;
    endWindowDrag(window: any): void;
    focusSearch(): void;
    shouldToggleByCornerOrButton(): boolean;
    _syncGrab(): boolean;
    _grab: any;
    show(state?: number): void;
    _animateVisible(state: any): void;
    _showDone(): void;
    hide(): void;
    _animateNotVisible(): void;
    _hideDone(): void;
    toggle(): void;
    showApps(): void;
    selectApp(id: any): void;
    runStartupAnimation(callback: any): void;
    getShowAppsButton(): any;
    get searchController(): any;
    get searchEntry(): any;
}
import * as Signals from '../misc/signals.js';
declare class ShellInfo {
    _source: any;
    setMessage(text: any, options: any): void;
}
export {};
